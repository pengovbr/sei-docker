apiVersion: v1
kind: Service
metadata:
  name: memcached
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  ports:
  - name: tcp
    port: 11211
    protocol: TCP
    targetPort: 11211
  selector:
    servico: memcached
  sessionAffinity: ClientIP
  sessionAffinityConfig:
    clientIP:
      timeoutSeconds: 86400
  type: ClusterIP
  
---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: memcached
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      servico: memcached
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        servico: memcached
    spec:
      containers:
      - image: ${DOCKER_IMAGE_MEMCACHED}
        imagePullPolicy: Always
        name: memcached
        #resources: #kb_resources
        #  limits: #kb_resources
        #    cpu: ${KUBERNETES_LIMITS_CPU_MEMCACHED} #kb_resources
        #    memory: ${KUBERNETES_LIMITS_MEMORY_MEMCACHED} #kb_resources
        #  requests: #kb_resources
        #    cpu: ${KUBERNETES_REQUEST_CPU_MEMCACHED} #kb_resources
        #    memory: ${KUBERNETES_REQUEST_MEMORY_MEMCACHED} #kb_resources
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30


---

apiVersion: v1
kind: Service
metadata:
  name: jod
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  clusterIP: None
  ports:
  - name: default
    port: 8080
    protocol: TCP
    targetPort: 8080
  selector:
    servico: jod
  sessionAffinity: None
  type: ClusterIP


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: jod
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      servico: jod
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        servico: jod
    spec:
      containers:
      - image: ${DOCKER_IMAGE_JOD}
        imagePullPolicy: Always
        name: jod
        #resources: #kb_resources
        #  limits: #kb_resources
        #    cpu: ${KUBERNETES_LIMITS_CPU_JOD} #kb_resources
        #    memory: ${KUBERNETES_LIMITS_MEMORY_JOD} #kb_resources
        #  requests: #kb_resources
        #    cpu: ${KUBERNETES_REQUEST_CPU_JOD} #kb_resources
        #    memory: ${KUBERNETES_REQUEST_MEMORY_JOD} #kb_resources
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30

---

apiVersion: v1
kind: Service
metadata:
  name: sei-app
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  clusterIP: None
  ports:
  - name: https
    port: 443
    protocol: TCP
    targetPort: 443
  - name: http
    port: 80
    protocol: TCP
    targetPort: 80
  selector:
    servico: app
  sessionAffinity: None
  type: ClusterIP


---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sei-app
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      servico: app
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        servico: app
    spec:
      containers:
      - command:
        - /entrypoint.sh
        envFrom:
        - configMapRef:
            name: sei-app
            optional: false
        - secretRef:
            name: sei-secret1
            optional: false
        image: ${DOCKER_IMAGE_APP}
        imagePullPolicy: Always
        name: sei-app
        livenessProbe:
          exec:
            command:
            - sh
            - -c
            - curl -s -L localhost/sei | grep frmLogin
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 20
        readinessProbe:
          exec:
            command:
            - sh
            - -c
            - curl -s -L localhost/sei | grep frmLogin
          failureThreshold: 5
          initialDelaySeconds: 10
          periodSeconds: 20
          successThreshold: 1
          timeoutSeconds: 20
        startupProbe:
          exec:
            command:
              - sh
              - '-c'
              - ls /sei/controlador-instalacoes/instalado.ok
          failureThreshold: 100
          initialDelaySeconds: 5
          periodSeconds: 5
          successThreshold: 1
          timeoutSeconds: 5
        #resources: #kb_resources
        #  limits: #kb_resources
        #    cpu: ${KUBERNETES_LIMITS_CPU_APP} #kb_resources
        #    memory: ${KUBERNETES_LIMITS_MEMORY_APP} #kb_resources
        #  requests: #kb_resources
        #    cpu: ${KUBERNETES_REQUEST_CPU_APP} #kb_resources
        #    memory: ${KUBERNETES_REQUEST_MEMORY_APP} #kb_resources
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /opt/
          name: vol1
        - mountPath: /sei/arquivos_externos_sei/
          name: vol2
        - mountPath: /sei/controlador-instalacoes
          name: vol3
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vol1
        persistentVolumeClaim:
          claimName: vol-sei-fontes
      - name: vol2
        persistentVolumeClaim:
          claimName: vol-sei-arquivosexternos
      - name: vol3
        persistentVolumeClaim:
          claimName: vol-sei-controladorinstalacao

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: sei-app-agendador
  namespace: ${KUBERNETES_NAMESPACE}
spec:
  progressDeadlineSeconds: 600
  replicas: 1
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      servico: app-agendador
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
    type: RollingUpdate
  template:
    metadata:
      labels:
        servico: app-agendador
    spec:
      containers:
      - command:
        - /entrypoint-agendador.sh
        envFrom:
        - configMapRef:
            name: sei-app
            optional: false
        - secretRef:
            name: sei-secret1
            optional: false
        image: ${DOCKER_IMAGE_APP_AGENDADOR}
        imagePullPolicy: Always
        name: sei-app
        #resources: #kb_resources
        #  limits: #kb_resources
        #    cpu: ${KUBERNETES_LIMITS_CPU_APP_AGENDADOR} #kb_resources
        #    memory: ${KUBERNETES_LIMITS_MEMORY_APP_AGENDADOR} #kb_resources
        #  requests: #kb_resources
        #    cpu: ${KUBERNETES_REQUEST_CPU_APP_AGENDADOR} #kb_resources
        #    memory: ${KUBERNETES_REQUEST_MEMORY_APP_AGENDADOR} #kb_resources
        stdin: true
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: File
        tty: true
        volumeMounts:
        - mountPath: /opt/
          name: vol1
        - mountPath: /sei/arquivos_externos_sei/
          name: vol2
        - mountPath: /sei/controlador-instalacoes
          name: vol3
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      volumes:
      - name: vol1
        persistentVolumeClaim:
          claimName: vol-sei-fontes
      - name: vol2
        persistentVolumeClaim:
          claimName: vol-sei-arquivosexternos
      - name: vol3
        persistentVolumeClaim:
          claimName: vol-sei-controladorinstalacao
